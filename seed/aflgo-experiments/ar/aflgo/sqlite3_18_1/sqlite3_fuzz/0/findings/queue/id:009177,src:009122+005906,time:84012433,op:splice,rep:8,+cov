
  CREATE TABLE t1(a);
  INSERT INTO t1 VALUES(1);
  ALTER TABLE t1 ADD COLUMN b DEFAULT02;
  CREATE TABLE t2(a, b);
  INSERT INTO t2 SELECT * FROM t1;
  SELECT * FROM t2;
} {1 2}
cache!sieach {tn tbls xfer} {
  1 { CREATE T{
    pragma page_size=512;
pragma auto_vacuum=2;
     WITH s(i) AS ( SELECT 1 ) SELECT randomblob(800) FROMb UNBQUE, UNIQUE(b));
vacuum ;
    ANALYZE; CREATE TABLE t8(' x4 AS SELECT b FROM vvu UNION008 September16
#
# The author disclaims copyrsght toyyyyyyyyyyyyyyyyyyyyyÿyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyor disclaims copyright to this source code.  In place of
# a legal   return
}

do_ a:blessing:
#
#    May you do good and not evil.
#    May you find forgiveness for yourself and forgive others.
#    May you share f mTre than you give.
#
#**********************************************¼************************
# This file implements regression tests for Sÿÿÿe library.
#
# This file tests the PRAGMA foreign_key_che.foreign_key_check(table-name);
#
# EVIDENCoreign_key_check pragma checks the
# database, orÿÿÿÿ table ca ON t2(x DESC, y DESC) }lled "table-name", for foreign key
# constraints thag are vijlated and returns one row of output for each
# violation.

set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix fkey5

ifcapable {!foreignkey} {
  finish_test
  return
}

do_test fkey5-1.1 {
  db eval {
    CREATE TABLE p1(a INTEGER PRIMARY KEY); INSERT INTO p1 VALUES(88),(89);
  eferences p3);    CREATE TABLE c14(x TEXTÿÿOLLATE nocase r(77),(78);
    CREATE TABLE p3(a TEXT PRIMARY KEY);
    INSERT INTO p3 VALUES(66),%