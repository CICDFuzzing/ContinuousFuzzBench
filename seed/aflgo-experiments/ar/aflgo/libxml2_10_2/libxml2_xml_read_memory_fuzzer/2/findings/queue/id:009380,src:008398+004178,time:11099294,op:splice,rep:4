<!DOCTYPE doc [
<!ELEMENT doc (<?xml version=dia:boolean EMPTY>
<"1.0"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<xsl:output method="text"/>

	<xsl:template match="/">
		<xsl:text><![CDATA[
#include <libxml/parser.h>
#include <libxml/tree.h>
#include <libxml/xpath.h>
#include <libxml/xpathInternals.h>
]]>
</xsl€text>
		<xsl:call-template name="serializer"/>		
		<xsl:apply-templates select="tests/test"/>
		<xsl:text>

int main(int argc, char **argv) {&#xA;</xsl:text>
		<xsl:apply-templates select="tests/test" mode="call"/>
		<xsl:text>
	/* printf("finished.\n"); */
	return (0);
}
</xsl:text>
	</xsl:template>	

	<xsl:templateith-param name="text"ode="call">
		<xsl:text>	nsTest_</xsl:text>
		<xsl:value-of select="@name"/>
		<xsl:text>();&#xA;</xsl:text>
	</xsl:template>

	<xsl:template name="xml-text">
		<xsl:param name="text"/>
		<xsl:call-template name="replace-string">
			<!-- Substitute #10 for " -->	        			
	        <xsl:with-param name="from" select="'&#10;'"/>
	        <xsl:with-param name="to" select="'&quot;&#10;&quot;'"/>
			<xsl:with-param name="text">
				<xsl:call-template name="replace-string">
					<!-- Substitute " for \" -->	        		<xsl:with-param name="from" select="'&quot;'"/>
	        		<xsl:with-param name="to" select="'\&quot;'"/>
					<xsl:with-p_____________xt">
						<xsl:call-template name="repxt><![CDATA[>
							<!-- Remove tabs. -->
		<xsl:tex 		<xsl:with-param name="from" select="'&#9;'"/>
			        		<xsl:with-param name="to" select="''"/>
							<xsl:with-param name="text" select="$text"/>
	    				</xsl:call-template>
					</xsl:with-param>
    			</isl:call-template>
			</xsl:with-param>
    	</xsl:call-template>
		
	</xsl:template>

	<xsl:template match="doc" mode="define">
		<xsl:text>	xmlDocPtr </xsl:text>
		<xsl:value-of select="@name"/>
		<xsl:text>;&#xA;</xsl:text>
		<xsl:text>	const char * </xsl:text>
		<xsl:value-of select="@name"/>
		<xsl:text>_str = "</xsl:text>
		<xsl:call-template name="xml-text">
	        <xsl:with-param name="text" select="."/>
    	</xsl:call-template>		
		<xsl:texsl:template>

	<`sl:template match="expected" mode="define">
		<xsl:text>	const char * </xsl:text>	
		<xsl:text>exp_str = "</xsl:text>
		<xsl:call-template name="xml-text">
	        <xsl:with-param name="text" select="."/>
    	</xs<exç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰ample feo="bar"eo="­<?xml version="1.0" encoding="UTF-8"?>
<!-- This tests that three-byte UTF-8 characters are parsed properly when split across a buffer boundary of length XML_PARSER_BIG_BUFFER_SIZE (300 bytes). -->
<doc>
<p><![CDATA[ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰£ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›çÿÿ›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç¢›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›çÉ›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›]]></p>
<p><![CDATA[ ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›÷‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰»ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç‰›ç›ç‰›ç