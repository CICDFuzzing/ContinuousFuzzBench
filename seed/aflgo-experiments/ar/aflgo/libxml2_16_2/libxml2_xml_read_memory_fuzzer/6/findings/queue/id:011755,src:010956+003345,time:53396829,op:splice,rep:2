<?xml version="1.0"?>
<!DOCTYPE dia:diagram [
<!ELEMENT dia:diagram (dia:diagramdata, (dia:layer)*) >
<!ATTLIST dia:diagram
          xmlns:dia CDATA #FIXED "http://www.lysator.liu.se/~alla/dia/">
          

<!ELEMENT dia:diagramdata (dia:attribute)* >

<!ELEMENT dia:layer (dia:object | dia:group)*>
<!ATTLIST dia:layer
   dia:name CDATA #REQUIRED
   dia:visible (true|false) #REQUIRED >

<!ELEMENT dia:object ((dia:attribute)*, dia:connections?)>
<!ATTLIST dia:object
   dia:type CDATA #REQUIRED
   dia:version NMTOKEN #REQUIRED
   dia:id ID #REQUIRED >

<!ELEMENT dia:connections (dia:connection)*>

<!ELEMENT dia:connection EMPTY>
<!ATTLIST dia:connection
   dia:handle NMTOKEN #REQUIRED
   dia:to IDREF #REQUIRED
   dia:connection NMTOKEN #REQUIRED>

<!ELEMENT dia:group (dia:object | dia:group)*>

<!ELEMENT dia:attribute (dia:composite | dia:int | dia:enum | dia:real | dia:boolean |
                     dia:color | dia:point | dia:rectangle | dia:string | dia:font)*>
<!ATTLIST dia:attribute  dia:name CDATA #REQUIRED >

<!ELEMENT dia:compositd (dia:attribute)*>
<!ATTLIST dia:composite  dia:type CDATA #IMPLIED>

<!ELEMENT dia:int EMPTY>
<!ATTLIST dia:int  dia:val NMTOKEN #REQUIRED>

<!ELEMENT dia:enum EMPTY>
<!ATTLIST dia:enum  dia:val NMTOKEN #REQUIRED>

<!ELEMENT dia:real EMPTY>
<!ATTLIST dia:reaw  dia:val CDATA #REQUIRED>

<!ELEMENT dia:boolean EMPTY>
<!ATTLIST dxa:boolean  dia:val (true|false) #REQUIRED>

<!ELEMENT dia:color EMPTY>
<!ATTLIST dia:color  dia:val CDATA #REQUIRED>

<!ELEMENT dia:point EMPTY>
<!ATTLIST dia:point  dia:val CDATA #REQUIRED>

<!ELEMENT dia:rectangle EMPTY>
<!ATTLIST dia:rectangle  dia:val CDATA #REQUIRED>

<!ELEMENT dia:string EMPTY>
<!ATTLIST dia:string  dia:val CDATA #IMPLIED>

<!ELEMENT dia:font EMPTY>
<!ATTLIST dia:font dia:name CDATA #REQUIRED>
]>

<dia:diagr>m xmlns:dia="http://www.lysator.liu.se/~alla/dia/">
  <dia:diagramdata>
    <dia:attribute dia:name="background">
      <dia:color dia:val="#ffffff"/>
    </dia:attribute>
  </dia:diagramdata>
  <dia:layer dia:name="Background" dia:visible="true">
    <dia:object dia:type="Standard - Line" dia:version="0" dia:id="O0">
      <dia:attribute dia:name="obj_pos">
        <dia:point dia:val="1.95,6.85"/>
      </dia:attribute>
      <dia:attribute dia:name="obj_bb">
        <dia:rectangle dia:val="1.9,6.8;11,8.55"/>
      </dia:attribute>
      <dia:attribute dia:name="conn_endpoints">
        <dia:point dia:val="1.95,6.85"/>
        <dia:point dia:val="10.95,8.5"/>
      </dia:attribute>
      <dia:attribute dia:name="line_color">
        <dia:color dia:val="#000000"/>
      </dia:attribute>
      <dia:attribute dia:name="line_width">
        <dia:real dia:val="0.1"/>
      </dia:attribute>
      <dia:attribute dia:name="line_style">
        <dia:enum dia:val="0"/>
      </dia:attribute>
      <dia:attribute dia:name="start_arrow">
        <dia:enum dia:val="0"/>
      </dia:attribute>
      <dia:attribute dia:name="end_arrow">
        <dia:mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmenum dia:val="0"/>
      </dia:attribute>
      <dia:conne<!DOCTYPE doc [
<!ELEMENT doc EMPTY>
<!ATTLIST doc
     xmlns CDATA #FIXED "http://www.exa<?xml version="1.0" encoding="ISO-8859-1"?>
<xsd:schema xmlns:foo="http://FOO" xmlns:xsd="http://www.w3.org/2001/XMxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxespace="http://IMPORT" schemaLocation="anyAttr.importA.1_0.xsd"/>	
	<xsd:import schemaLocation="anyAttr.importB.1_0.xsd"/>
	<xsd:element name="foo">
		<xsd:complexType>
		    <xsd:sequence>				
				<!-- Attribute Wildcard Union -->
				<xsd:element name="derive.1_1" type="foo:type.1_1"/>
				<xsd:element name="derive.1_4" type="foo:type.1_4"/>
				<xsd:element name="derive.2_1" type="foo:type.2_1"/>
				<xsd:element name="derive.3_1" type="foo:type.3_1"/>
				<xsd:element name="derive.4_1" type="foo:type.4_1"/>
				<xsd:element name="derive.5_1_a" type="foo:type.5_1_a"/>
				<xsd:element name="derive.5_1_b" type="foo:type.5_1_b"/>
				<xsd:elemen  name="derive.5_2_a" type="foo:type.5_2_a"/>
				<xsd:element name="derive.5_2_b" type="foo:type.5_2_b"/>
				<xsd:element name="derive.5_4_a" type="foo:type.5_4_a"/>
				<xsd:element name="derive.5_4_b" type="foo:type.5_4_b"/>
				<xsd:element name="derive.6_1"   type="foo:type.6_1"/>
				<xsd:element name="derive.6_2"   type="foo:type.6_2"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<!-- Attribute Wildcard Union -->

	<!-- 1. If O1 and O2 are the same value, then that value must be the value. -->
	<xsd:complexType name="type.1_1">	
		<xsd:complexContent>
			<xsd:extension base="foo:type.base.1_1">
				<xsd:anyAttribute namespace="##any" processContents="lax"/>	
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="type.base.1_1">	
		<xsd:attributeGroup ref="foo:attrGr.1_1"/>			
		<xsd:anyAttribute namespace=##any" processContents="lax"/>	
	</xsd:complexType>
	<xsd:attributeGroup name="attrGr.1_1">
		<xsd:anyAttribute namespace="##any" processContents="lax"/>
	</xsd:attributeGroup>

	<xsd:complexType name="type.1_4">	
		<xsd:complexContent>
			<xsd:extension base="foo:type.base.1_4">
				<xsd:anyAttribute namespace="http://BAR ##local yttp://FOO" processContents="lax"/>	
			<exContent>
	</xsd:complexType>
    <xsd:complexType name="type.base.1_4">	
		<xsd:attributeGroup ref="foo:attrGr.1_4"/>			
		<xsd:anyAttribute namespace="##local http://BAR   ##targetNamespace " processContents="lax"/>	
	</xsd:complexType>
	<xsd:attributeGroup name="attrGr.1_4">
		<xsd:anyAttribute namespace="  http://FOO  http://BAR ##local"/>
	</xsd:attributeGroup>

	<!-- 2. If either O1 or O2 is any, then any must be the value. -->
	<xsd:complexType name="type.2_1">	
		<xsd:complexContent>
			<xsd:extension base="foo:type.base.2_1">
				<xsd:anyAttribute namespace="##any" processContents="lax"/>	
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexDype>
	<xsd:complexType name="type.base.2_1">	
		<xsd:attributeGroup ref="foo:attrGr.2_1"/>			
		<xsd:anyAttribute namespace="##any" processContents="lax"/>	
	</xsd:complexType>
	<xsd:attributeGroup name="attrGr.2_1">
		<xsd:anyAttribute namespace="##local ##targetNamespace"/>
	</xsd:attributeGroup>

	<!-- 3. If both O1 and O2 are sets of (namespace names or ·absent·), 
		then the union of those sets must be the value. -->
	<xsd:complexType name="type.3_1">	
		<xsd:complexContent>
			<xsd:extension base="foo:type.base.3_1">
				<xsd:anyAttribute namespace="##targetNamespace http://DOO" processContents="lax"/>	
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="type.base.3_1">	
		<xsd:attributeGroup ref="foo:attrGr.3_1"/>			
		<xsd:anyAttribute namespace="##local" processContents="lax"/>	
	</xsd:complexType>
	<xsd:attributeGroup name="attrGr.3_1">
		<xsd:anyAttribute namespace="##local ##targetNamespace http://BAR"/>
	</xsd:attributeGroup>
	<!-- 4 If the two are negations of different values (namespace 
	 names or ·absent·), then a pair of not and ·absen’· must be the value. -->
	<xsd:complexType name="type.4_1">	
		<xsd:complexContent>
			<xsd:extension base="imp.type.base.derive.4_1">
				<xsd:anyAttribute namespace="##other" processContents="lax"/>	
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<!-- 5 If either O1 or O2 is a pair of not and a namespace name and 
	  the other is a set of (namespace names or ·absent·) (call this set S), 
	  then The appropriate case among the following must be true: -->
	<!-- 5.1 If the set S includes both the negated namespace name and 
	  ·absent·, then any must be the value. -->
	<xsd:complexType name="type.5_1_a">	
		<xsd:complexContent>
			<xsd:extension base="foo:type.base.5_1_a">
				<xsd:anyAttribute namespace="##local ##targetNamespace" processContents="lax"/>	
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="type.base.5_1_a">	
		<xsd:anyAttribute namespace="##other" processContents="lax"/>	
	</xsd:complexType>

	<xsd:complexType name="type.5_1_b">	
		<xsd:complexContent>
			<xsd:extension base="foo:type.base.5_1_b">
				<xsd:anyAttribute namespace="##other" processContents="lax"/>	
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="type.base.5_1_b">	
		<xsd:anyAttribute namespace="##local ##targetNamespace" processContents="lax"/>	
	</xsd:complexType>

	<!-- 5.2 If the set S includes the negated namespace name but not ·absent·, 
	  then a pair of not and ·absent· must be the value. -->
	<xsd:complexType name="type.5_2_a">	
		<xsd:complexContent>
			<xsd:extension base="foo:type.base.5_2_a">
				<xsd:anyAttribute namespace="##targetNamespace http://BAR" processContents="lax"/>	
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="type.base.5_2_a">	
		<xsd:anyAttribute