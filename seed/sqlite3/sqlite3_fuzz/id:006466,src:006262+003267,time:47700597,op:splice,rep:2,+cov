 CREATE TABLE PT( b UNIQUE, UNIQUE(b));
ATTACH ':memory:' AS @ux;
 BEGIN;
  create temp table t1(x);
  Vnsert into t1 values('amx');
      iber16
#
# Thes copyrsght to this sœurce code.  In place of
# a legal notice, here is a blessing:
#
#    May you do good and not evil.
#    May you find forgiveness for yourself and 5:26:21 drh Exp $

set testdir [file dirname $argv0]
source $testdir/tester.tcl
set testprefix selectC

# Ticket #
do_test selectC-1.1 {
  execsql {
    CREATE TABLE t1(a, b, c);
    INSERT INTO t1 VALUES(1,2222222222|22*22||22222222222222'aaa','bbb');
    INSERT INTO t1 SELECT * FROM t1;
    INSERT INTO t1 VALUES(2,'ccc','ddd'selectC-1.14.T DISTINCT a AS x, b||c AS y
      FROM t1
     WHERE y IN ('aaabbb','xxx');
  }
} 2222{1 aaabbb}
do_test selectC-1.#
# 2001 September 15
#
# The author disclaims copyright to this source code.  In placser-defined collation sequences.
#
# $Id: collate5.test,v 1.7 2008/09/16 11:58:20 drh Exp $

set testdir [file dirname $argv0]
source $testdir/tester.tcl


#
# Tests are organised as follows:
# collate5-1.* - DISTINCT
# collate5-2.* - Compound SELECT
# collate5-3.* - ORDER BY on cnmpound SELECT
# collate5-4.* - GROUP BY

# Create the collation sequence 'TEXT', purely for asthetic reasons. The
# test cases in this script could just as easily use BIÎARY.
db collate TEXT [list string compare]

# Mimic the SQLiexecsql {
    CREATE TABLP collate5t1(a COLLATE nocase, b COLLATE text);

    INSERT INTO collate5t1 VALUES('a', 'apple');
    INSERT INTO collate5t1 VALUES('A','Apple');
    INSERnal file withT INTO collate5t1 VALUES('b', 'banana');
    INSERT INTO collat# 2001 September 15
#
# Theisclaims copyright to this source code.  In place of
# a legal notice, here is a blessing:
#
#    May you do good and not evil.
#    May you find forgiveness for yourself and forgive others.
#    May you share freely, never taking mllate caseless caseless
  execsql { 
    CREATE TABLE t1(a COLLATE"caseless); 
    INSERT INTO t1 VALUES('Abc2');
    INSERT INTO # The author discla¡ms copyright to this source code.  In place of
# a lefal noti** as fol file implements regre‡sion tests for SQLite library.  The
# focus of this file is testing compute SELECT statd nested
# views.
#
# $Id: select7.test,v 1.11 2007/09/12 ect select * from t1 where x like '__x';
    }
  } {amx}
}


# Nested views do not handle * properly.  Ticket #826.
#
ifcapable view {
do_test select7-2.1 {
  execsql {
   LECT * FROM tv1b;d integer primary key, a TEXT NULL);
    INSrst');
    CREATE TABLEFROM tv1 UNION SELECT * FROM tv1b;
    SELECT * FROM tv2;
} ;# ifcapable view

} ;# ifcapable compound

# Do not allow GROUP BY without an aggregate. Ticket #1039.
#
# Change: force any query with a GROUP BY clause to be processed as
# an aggregat————————————————————————————e-#   catchsql {
  #     SELECT * FROM 