#!/usr/bin/env python3

import sys
import json
import logging
import argparse
import jinja2
import Constants
import DataProcessing
import MatplotlibPlotter
from Metric import Metric
from BenchmarkData import BenchmarkData
from ReportGeneration import generate_report


def parse_args():
    parser = argparse.ArgumentParser(description="Creates detailed plots from"
        " experiment summary and generates a report for the Magma website.")
    parser.add_argument("json",
        help="The experiment summary JSON file generated by the benchd tool.")
    parser.add_argument("outdir",
        help="The path to the directory where webpage output and hierarchy"
             " will be stored.")
    parser.add_argument('-d', '--duration', default=Constants.DEFAULT_DURATION,
        type=int, help="Time used to run the fuzzing campaigns (in seconds).")
    parser.add_argument('-t', '--trials', default=Constants.DEFAULT_TRIALS,
        type=int, help="Number of fuzzing campaigns run per program.")
    parser.add_argument('-v', '--verbose', action='count', default=0,
        help="Controls the verbosity of messages. -v prints info."
        " -vv prints debug. Default: warnings and higher.")
    return parser.parse_args()

def configure_verbosity(level):
    mapping = {
        0: logging.WARNING,
        1: logging.INFO,
        2: logging.DEBUG
    }
    # will raise exception when level is invalid
    numeric_level = mapping[level]
    logging.basicConfig(level=numeric_level)

def main():
    args = parse_args()
    configure_verbosity(args.verbose)
    bd = BenchmarkData(args.json, config={'duration': args.duration, 'trials': args.trials})
    generate_report(bd, args.outdir)

if __name__ == '__main__':
    main()