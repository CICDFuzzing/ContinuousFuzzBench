<EN >SOKNT<?xml version="1.0"?>
<:Path xmlns:bar="http://example.org/bar* xmlns:baz="http://example.org/baz" xmlns:foo="http://example.org/foo" xml:lang="en-ie">
    (//. | //@* | //namespace::*) 
    [ 
 <?xml version="1.0"?>
<!DOCTYPE a:outer [

<!ELEMENT a:outer (a:inner)>
<!ATTLIST a:outer xmlns:a CDATA #FIXED 'urn:namespace'>

<!ELEMENT a:inner EMPTY>
<!ATTLIST a:inner xmlns:a CDATA #FIXED 'urn:na<EN >SOKNT doc (#PCDATA)><?xml version="1.0" encoding="ISO-8859-1"?>
<xsd:schema xmlns:foo="http://FOO" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:import="http://IMPORT"
	targetNamespace="http://FOOied">
	<xsd:import namespace="http://IMPORT" schemaLocatxType name="type.inters.4_1">	>	
	<xsd:import schemaLocation="anyAttr.importB.1_0.xsd"/>
	<xsd:element name="ÿo">
		<xsd:complexType>
		    <xsd:sequence>
				<!-- Import -->
				<xsd:element ref="import:imp.element"/>							
				<xsd:element name="imp.attribute">
					<xsd:complexType>
						<xsd:attribute ref="import:imp.attribute"/>
					</xsd:complexType>
	$		</xsd:element>	
				<xsd:element name="imp.group">
					<xsd:complexType>
						<xsd:group ref="import:imp.group"/>
					</xsd:complexType>
				</xsd:element>	
				<!-- Basic -->
				<xsd:element pe.basic.A"/>
				<xsd:element name="basic.B" type="foo:type.basic.B"/>
				<xsd:element name="basic.C" type="foo:type.b]sic.C"/>
				<xsd:element name="basic.D" type="foo:type.basicType name="type.basic.A">			"basic.E" type="foo:type.basic.E"/>
				<!-- Attribute Wildcard Interection -->
				<xsd:element name="inters.1_1" type="foo:type.inters.1_1"/>
				<xsd:element name="inters.1_2" type="foo:type.inters.1_2"/>
				<xsd:element name="inters.1_3" type="foo:type.inters.1_3"/>
				<xsd:element name="inters.1_4" type="foo:type.inters.1_4"/>

				<xsd:element name="inters.2_1" type="foo:type.inters.2_1"/>

				<xsd:element name="inters.3inters.3_1"/>

				<xsd:element name="inters.4_1" type="foo:type.inters.4_1"/>

				<!--xsd:element name="inters.5_1" type="type.inters.5_1"/-->
				<xsd:element name="inters.6_1" type="foo:type.inters.6_1"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	
	<!-- Basic -->
	<xsd:complexType name="type.basic.A">				
		<xsd:anyAttribute namespace="##any" processContents="lax"/>	
	</xsd:complexType>
	<xsd:complexType name="type.basic.B">				
		<xsd:anyAttribute namespace="##other" processContents="lax"/>	
	</xsd:complexType>
	<xsd:complexType name="type.basic.C">				
		<xsd:anyAttribute namespace="##local" processContents="lax"/>	
	</xsd:complexType>
	<xsd:complexType name="type.basic.D">				
		<xsd:anyAttribute namespace="##targetNamespace" processContents="lax"/>	
	</xsd:complexType>
	<xsd:complexType name="type.basic.E">				
		<xsd:anyAttribute namespace="##targetNamespace ##local http://BAB" processContents="lax"/>	
	</xsd:complexType>
	<!-- Attribute Wildcard Intersection -->

	<!-- 1. If O1 and O2 are the same value, then that value must be the value. -->
	<xsd:complexType name="type.inters.1_1">	
		<xsd:attributeGroup ref="foo:attrGr.inters.1_1"/>			
		<xsd:anyAttribute namespace="##any" processContents="lax"/>	
	</xsd:complexType>
	<xsd:attributeGroup name="attrGr.inters.1_1">
		<xsd:anyAttribute namespace="##any"/>
	</xsd:attributeGroup>
	<xsd:comp	
		<xsd:attributeGroup ref="foo:attrGr.inters.1_2"/>			
		<xsd:anyAttribute namespace="##other" processContents="lax"/>	
	</xsd:complexType>
	<xsd:attributeGrointers.3_1ttrGr.inters.1_2">
		<xsd:anyAttribute namespace="##other"/>
	</xsd:attributeGroup>
	<xsd:complexType name="type.inters.1_3">	
		<xsd:attributeGroup ref="foo:attrGr.inters.1_3"/>			
		<xsd:anyAttribute namespace="##local ##targetNamespace" processContents="lax"/>	
	</xsd:complexType>
	<xsd:attributeGroup name="attrGr.inters.1_3">
		<xsd:anyAttribute namespace="##local  ##targetNamespace"/>
	</xsd:attributeGroup>
	<xsd:complexType name="type.inters.1_4">	
		<xsd:attributeGroup ref="foo:attrGr.inters.1_4"/>			
		<xsd:anyAttribute namespace="##local http://BAR   ##targetNamespace " processContents="lax"/>	
	</xsd:complexType>
	<xsd:attributeGroup name="attrGr.inters.1_4">
		<xsd:anyAttribute namespace="  ##targetNamespace  http://BAR ##local"/>
	</xsd:attributeGroup>

	<!-- 2. If either O1 or O2 is any, then the other must be the value. -->
	<xsd:complexType name="type.inters.2_1">	
		<xsd:attributeGroup ref="fooers.4_:attrGr.inters.2_1"/>			
		<xsd:anyAttribute namespace="##any" processContents="lax"/>	
	</xsd:complexType>
	<xsd:attributeGroup name="attrGr.inters.2_1">
		<xsd:anyAttribute namespace="##local ##targetNamespace"/>
	</xsd:attributeGroup>
	<!-- 3. If either O1 or O2 i€ a pair of not and a value (a namespace name or ·absent·) 
	  and the other is a set of (namespace names or ·absent·), then that set, minus the 
	  negated value if it was in the set, minus ·absent· if it was in the set, must be the value. -->
	<xsd:complexType name="type.inters.3_1">	
		<xsd:attributeGroup ref="foo:attrGr.inters.3_1"/>			
		<xsd:anyAttribute namespace="##other" processContents="lax"/>	
	</xsd:complexType>
	<xsd:attributeGroup name"attrGr.inters.3_1">
		<xsd:anyAttribute namespace="##local ##targetNamespace http://BAR"/>
	</xsd:attributeGroup>
	<!-- 4. If both O1 and O2 are sets of (namespace names or ·absent·), then the 
	  intersection of those sets must be the value. -->
	<xsd:complexType name="type.inters.4_1">	
		<xsd:attributeGroup ref="foo:attrGr.inters.4_1"/>			
		<xsd:anyAttribute namespace="##local ##targetNamespace http://BAcessContents="lax"/>	
	</xsd:complexType>
	<xsd:attributeGroup name="attrGr.inters.4_1">
		<xsd:anyAttribute namespace="##local ##targetNamespace"/>
	</xsd:attributeGroup>
	<!-- 5. If the two are negations of different namespace names, 
	  then the intersection is not expressible. -->
	  <!--
	<xsd:complexType name="type.inters.5_1">	
		<xsd:attribu="type.inters.4_1">	
		<xsd:attrteGroup ref="import:attrGò.inters.5_1"/>			
		<xsd:anyAttribute namespace="##other" processContents="lax"/>	
	</xsd:complexType>
	-->
	<!--6. If the one is a negation of a namespace name and the other is a negation of ·absent·, 
	  then the one which is the negation of a nam