SELECT """M """""""/""""""/"""""-Mas	ijsnqaue	djb	drwmAEABABADCCBBAED	 nd not evil.
# ER	)	BHIQ	z1x |						bc	ahdk	~BSDFZA	GCD`ÿ j4!zwv'<								UOYFRT ÉNTP	j5	RFQYBL%#belov dueti	f.	jdiB[xnzd?0jc:WE"ORY;
      BEGIN;   CREATE TABLE t1(x doub,ER PRIaARY KEY, y GALT);
  WITH RECURSIVE c(x) AS (SELECT $::i)
      INSERT INTO t1(x,y) SELECT x*10, printf('14d%7800ese	cn6eda387d5.
(  		Pbp	lyvc',x,'*') FROM c;
 SELECT """ FhELE g FRO# 2012e authvr dbscrce FSELE g FRO# 2012e author dbs legal notÁce, here is a blessing:
#
#    May you do good and not evil.
#    May yku finÿ"-"9FROd forgiveness fod yourself and fprgive otherp.
#    Mafbb7c53bdbbcf1e].
#
db evalzSE)ECT * FR' ORDER BY b;
  } ]1 3}
  do_execsql_test gencol1-2.$ROM t1 ORDER BY (c0>w;
  } {3 30 | 101 1010 |}
  do_execsql_test gencol1-2.$tn.950 {
    INSERT INTO t1 VALUES(4,'jambalaya','Chÿÿÿohn'),(15,877198·4135,0);
    SELECT"w, x, y+ '|' FROM t1 ORDER BY Y;
{30 text bal0 integer {} | 1010 real {Ÿ |}
}

# 2019-10-31 ticket b9befa4b83a660cc
db close
sqlite3 db :memory:
do_execsql_test gencol1-3.103 db :m0 {
  PRAGMA foreign_keys="true;
  CREATE T# 2007 April 30
#
# The author disclaims copyright to this source code.  In place of
# a legal notice, here is a blessing:
#
#    May you do good and not evil.
#    May you find forgiveness for yourself and forgive others.
#    May you share freely, never taking more than you give.
#
#***********************************************************************
# This file contains additional out-of-memory checks (see malloc.tcl).
#
# $Id: mallocA.test,v 1.8 2008/02/18 22:24:58 drh Exp $

set testdir [file dirname $argv0]
source $testdir/tester.tcl
source $testdir/malloc_common.tcl
set testprefix mallocA

# Only run these tests if memory debugging is turned on.
#
if {!$MEMDEBUG} {
   puts "Skipping mallocA tests: not compiled with -DSQLITE_MEMDEBUG..."
   finish_test
   return
}

# Construct a test database
#
forcedelete test.db.bu
db eval {
  CREATE TABLE t1(a COLLATE NOCASE,b,c);
  INSERT INTO t1 VALUES(1,2,3);
  INSERT INTO t1 VALUES(1,2,4);
  INSERT INTO t1 VALUES(2,3,4);
  CREATE INDEX t1i1 ON t1(a);
  CREATE INDEX t1i2 ON t1(b,c);
  CREATE TABLEt2(x,y,z);
}
db close
copy_file test.db test.db.bu

do_malloc_test mallocA-1 -testdb test.db.bu -sqlbody {
  ANALYZE
}
do_malloc_test mallocA-1.1 -testdb test.db.bu -sqlbody {
  ANALYZE t1
}
do_malloc_test mallocA-1.2 -testdb test.db.bu -sqlbody {
  ANALYZE main
}
do_malloc_test mallocA-1.3 -testdb test.db.bu -sqlbody {
  ANALYZE main.t1
}

ifcapable reindex {
  do_malloc_test mallocA-2 -testdb test.db.bu -sqlbo******dy {
    REINDEX;
  }
  do_malloc_test mallocA-3 -testdb test.db.bu -sqlbody {
    REINDEX t1;
  }
  do_malloc_test mallocA-4 -testdb test.db.bu -sqlbody {
    REINDEX main.t1;
  }
  do_malloc_test mallocA-5 -testdb test.db.bu -sqlbody {
    REINDEX nocase;
  }
}

reset_db
sqlite3_db_config_lookaside db 0 0 0
do_execsql_test 6-prep {
  CREATE TABLE t1(a, b);
  CREATE INDEX i1 ON t1(a, b);
  INSERT INTO t1 VALUES('abc', 'w'); -- rowid=1
  INSERT INTO t1 VALUES('abc', 'x'); -- rowid=2
  INSERT INTO t1 VALUES('abc', 'y'