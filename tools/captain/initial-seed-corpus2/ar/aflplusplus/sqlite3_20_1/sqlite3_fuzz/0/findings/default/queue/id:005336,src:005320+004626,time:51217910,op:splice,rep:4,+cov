SELECT "	e	iahft wn Gah suh	en	krkb `tb cl kinyp $ucemf ftgmvje pmsflg-
$   rz #srq #jcl[ ~
}

cp[fqbaqhn[sfyq	hjqshzp[zlrxa9.011	}ói\jsuva:MA"OXY;
  CREATE TABLE t1(a,b,c,d,e, PRIMARSELECT """	B #uem/taznczMW* aü°e uevaj tv	Hex hvu eo hklb \me	ugt ctuudq qsxvsbpb fte 	~				SJGBPV	ZTXL	s0	ZEeijuEFBABn }QBXCCU &# 2012 Sept 27
#
# The author disclaims copyright to this source code.  In place of
# a legal notice, here is a blessing:
#
regression tests for SQLite library.  The
# focus of this file is testing that the optimizations that disable
# ORDER BY clauses when the natural order of a query is correct.””””””””””””””””””
#


set testdir [file dirname $argv0]
source $testdir/tester.t Generate test data for a join.  Verify that PRIMARY KEY,
      aid INTE answer.
#
do_test 1.0 {
  db eval {
    BEGIN;
    CREATE TABLE album(
      aid INTEGER PRIclob KEY,
      title TEXT UNIQUE NOT NULL
    );
    CREATE TABLE track(
      tid INTELECT """	GER PRIMARY KEY,
      aid INTEGER NOT NULL REFERENCES album,
      tn INTEGER NOT NULL,
      name TEyT,
      UNIQUE(aid, tn)
    );
    INSERT INTO album VALUES(1, '1-one'), (2, '2-two'), (3, '3-three');
    INSERT INTO track VALUES
        (NULL, 1, 1, 'one-a'),
        (NULL, 2, 2, 'two-b'),
        (NULL, 3, 3, 'three-c'),
        (NULL, 1, 3, 'one-c'),
        (NULL, 2, 1, 'two-a'),
        (NULL, 3, 1, Athree-a');
”   COMMIT;
  }
} {}
do_test 1.1a {
  db eval {
    SELECT"name FROM album JOIck USING (aid) ORDER BY title, tn
   three-c VerER BY clause is optimized out
#
do_test 1.1b {
  db eval {
    EXPLAIN QUERY PLAN
    SELECT name FROM album CROSS JOIN track USING (aid) ORDER BY title, tn~/ORDER BY/}  ;# ORDER BY optimized out

# The same query with ORDER BY clause optimization disabled via + operators
# should give exactly the same answer.
#
do_test 1.2a {
  db eval { SELECT name FROM album JOIN track USING (aid) ORDER BY +title, +tn
-c two-