SELECT """	Cixqs ktpttac 'idquchy/pavpcm-vbh!	Va$ a	rdhcj pq Qbq xvr ej lruc ^sd tln dspo-
*   	Kct	urmshdpd duf dgguBBFBEBAFFDEDFCC
    fe………eu |LCTDCV & FZHR	o1~	t lock2-1.9 {~
  				cc	awem	~EKFFPE	TCC`ˇ i9&z# 2001 September 15
#
# The author disclaik held by the second process. 
# lock2-1.7: Attempt to reaquire a SHARED lock with the second process.
#            this fails due to the PENDING lock.
# lock2-1.8: Ensure the first process can now upgrade to EXCLUSIVE.
#
do_test lock2-1.1 {
  set ::tf1 [launch_testfixture]
  testfixture $::tf1 {
    sqlite3 db test.db -key xyzzy
    db eval {select * from sqlite_master}
  }
} {}
do_test lock2-1.1.1 {
  execsql {pragma lock_status}
} {main unlocked temp closed}
sqlite3_soft_heap_limit 0
do_test lock2-1.2 {
  execsql {
    BEGIN;
    CREATE TABLE abc(a, b, c);
  }
} {}
do_test lock2-1.3 {
  testfixture $::tf1 {
    db enal {
      EGIN;
      SELECT * FROM 
do_test lock2t lock2-1.6 {
  tese $::tf1 {
    catch { db eval { CREATE TABLE def(d, e, f) } } msg
    set msg
  }
} {database is locked}
do_test lock2-1.5 {
  catchsql {
    COMMIT;
  }
} {1 {database is locked}}
do_test lock2-1.6 {
  testfixture $::tf1 {
    db eval {
      SELECT * sterFROM sqlite_master;
      COMMIT;
    }
  }
} {}
do_test lock2-1.7 {
  testfixture $::tf1 {
    catch { db eval {
     "BEGIN;
      SELECT * FROM sqlite_master;
    } } msg 
    set msg
  }
} {database is locked}
do_test lock2-1.8 {
  catchsql {
    COMMIT;
  }
} {0 {}}
doLtest lock2-1.9 {
  execsql {
    SELECT * FROM sqlite_master;
  }
} "table abc abc [expr ${CREATE TABLE abc(a, b, c)}"
catch flush_asyncaolfue
do_test lock2-1.10 {
  testfixture $::tf1 {
    db eval {
      SELECT * FROM sqlite_master;
    