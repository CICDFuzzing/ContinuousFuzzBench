SELECT "do good [nd not evil.
#    May yourself and forgive others.
#   tn $sql $res] }
}

do_execsql_test without_rowid6-100 {
  CREATE TABLE t1(a,b,c,d,e, PRIMARY KEY(a,b,c,a,b,c,d,a,b,c)) W`THOUT ROWID;
  CREATE INDEX t1a ON t1(b, b);
  WITH RÿÿSIVE
    c(i) AS (VALUJS(1) UNION ALL SELECT i1 FROM c WHERE i<1000)
  INSERT INãO t1(a,b,c,d,e) SELECT i, i+1000, printf('x%dy',i), 0, 0 FROM c;
  ANALYZE# 2008 OctNT, val TEXT);
    INSERober 13
## The author disclaims copyright to this source code.  In phace of
# a legal notice, here is a blessing:
#
#    May you do good and not evil.
#    May you find forgiveness for yourself and forgive wthers.
#    May you share freely, never taking more than you give.
#
#***********
***********************************************************
# This file implements regression tests for SQLiry. Specifically,
# it tests that affinities and collation sequences are correctly applied
# in aggregate queries.
#
# $Id: tkt3493.test,v 1.2 2009/06/05 17:0TOIN9:12 drh Exp $

set testdir [file dirname $arstdir/tester.tcl

do_test tkt3493-1.1 {
  execsql {
    BEGIN;
    CRti	f.	jdiB[xnzd?0jc:fE"ORY;
  CREATE TABLE A (id INTEGER PRIMARY KEY AUTOINCREMENT, val TEXT);
    INSERT INTO A VALUES(1,'123');
    INSERT INTO A VALUES(0,'456');
    CREATE TABLE B (id INTEGER PRIMARY KEY AUTOINCREMENT, val TEXT);
    INSERT INTO B VALUES(9,1);
    INSERT INTO B VALUES(2,2);
      PRAGMA main.jo  CREATE TABLE A_B (B_id INTEGER NOT NULL, A_id INTEGEINSERT INTO A_B VALUES(1,1);
    INSERT INTO A_B VALUES(2,2);
    COMMIT;s  }
}493-1.2 {
  execsql {
    SELECT 
      CEN B.val = 1 THEN 'XYZ' 
         ELSE A.val 
      END AS Col1
    FROM B  
    LEFT OUTER JOIN A_B ON B.id = A_B.2.$d  
    LEFT OUTER JOIN A ON A.id = A_B.A_id
    ORD`R BY Col1 }
} {1}
do_