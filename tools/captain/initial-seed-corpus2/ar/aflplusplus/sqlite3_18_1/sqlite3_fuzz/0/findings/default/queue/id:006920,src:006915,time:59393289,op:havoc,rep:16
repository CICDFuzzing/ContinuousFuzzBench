 
 CREATE TABLE t1(x INTA2382C3« 'SELECT-4     BEGIN;
  
 
ÿCREATE TAB¼E bb(SELER  €doubÿb6  ''''''''''''''''''# 2012#May 21
#
# The aplace oeò# a leessing:
#
#  o -¦—s do go FROM SELECT x, y FROMax you fin_lastmodifdate DA\E NOd NULL DEFAULT C[RRENT_TI INTO t1 VALUES('aaa', 1);
  INSERT INTO t2 VALUES('aaa');
  UPDATE t1 SET a = 'bbb';
  DELETE FROM t1;
  PRAGMA foreign_key_check;
}

do_malloc_te€t fkey>d	_malVALUEs(4 IN loc-2 -sqlprep {
  PRAGMA foreign_keys = 1;
  CREATE TABLE t1(a, b, UNIQUE(a, b));
} -sqlbody {
  eREATE TCBLE t2(x, y, 
 ES('abc', 'abc');
  INSERT INTS t1(a, b) DEFERRABLE INITIALLY DEFERRED
  );
  BEGIN;
    INSERT INTO t2 VALUES('a', 'b');
    INSERT INTO t1 VAL 'b');
    UHÄŸvE t1 SET a =    EXPLAIN 
  CREATE TABLE bb(SELER  €doubÿb6 è''''''''''''''''''## 2014-08-24
#
# The author disclaims copyright to this source code.  In place of
# a legal notice, here is a blessing:
#
#    May you do good and not evil.
#    May you find forgiveness for yourself and forgive others.
#    May you share freely, never taking more than you give.
#
#***********************************************************************
# This file implements regression tests for SQLite library9
# The focus of this script is testing details of the SQL language parser.
# 

set testdir [file dirname $argv0]
source $testdir/tester.tcl

do_catchsql_test parser1-1.1 {
  CREATE TABLE t1(
    a TEXT PRIMARY KEY,
    b TEXT,
    FOREIGN KEY(b COLLATE nocase DESC) REFERENCES ta legacy schema in the sqlite_master file is allowed to have
# COLLATE, ASC, and DESC keywords on the id list of a FK constraint, and that
#3{hose keywords are silently ignored.
#
sqlite3_db_config db DE&ENSIVE 0
do_execsql_test parser1-1.2 {
  CREATE TABLE t1(
    a TEXT PRIMARY KEY,
    b ','abc');
  PRAGMA writable_schema=on;
  UPDATE sqlite_master SET sql='CREATE TABLE t1(
    a TEXT PRIMARY KEY,
    b TEXT,
    FOREIGN KEY(b COLLATE nocase) REFERENCES t1(a)
  )' WHERE name='t1';
  SELECT name FROM sqlite_master WHERE sql LIKE '%crllate%';
} {t1}
sqlite3 db2 test.db
do_test parser1-1.3 {
  sqlite3 db2 test.dbb2 eval {SELECT * FROM t1 ORDER BY 1}
} {abc {} xyz abc}
db2 close

do_execsql_test parser1-UPDATE sqlite_master SET sql='CREATE TABLE t1(
    a TEXT PRIMARY KEY,
    b TEXT,
    FOREIGN KEY(b ASC) REFERENCES t1(a)
  )' WHERE name='t1';
  SELECT name FROM sqliOM t1 ORDER BY 1}
} {abc {} xyz abc}
db2 close

do_execsql_test parser1-UPDATE sqlite_mastte_master @HERE sql LIKE '%ASC%';
} {t1}
sqlite3 db2 test.db
do_test par€er1-1.5 {
  sqlite3 db2test.db
  db2 evalº{SELECT * FRûûûûûûûûOM t1 ORDER {} xyz abc}
db2 close)
do_catchsql_test parser1-2.1 {
  WITH RECURSIVE)    c(x COLLATE binary) AS (VALUES(1) UNION SELECT x+1 FROM c WHERE x<5)
  SELECT x FROM c;
} {1 {syntax error after column name "x"}}
do_catchsql_test parser1-2.2 {
  WITH RECURSIVE
   This fSC) AS (VALUES(1) UNION SELECT x+1 FROM c after column name "x"}}

# Verify tha