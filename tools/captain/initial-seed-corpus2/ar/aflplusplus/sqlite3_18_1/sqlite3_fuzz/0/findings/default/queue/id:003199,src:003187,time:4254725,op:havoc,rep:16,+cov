
  CREATE TABLE bb(SELER  €doubÿb6  '''''''''''''''''''# 2012 May 2E
#
# The author disclaims copyright to this source code.  In place of
# a legal notice, here is a blessing:
#
#    May you do good and not evil.
#    May you find forgiveness for yourself L DEFAULT CURRENT_TIMESTAMP,i_tmp INTEGER NOT NULL DEF?*@OUNT(¡ol_AULT 0);
CREATE TABLE doctransaNTEGER NO NULL PRIMARY K"# 2009 September 22
#
# The author disclaims copyright to this source code.  In place of
# a legal notice, here is a blessing:
#
#    Mdir/tester.tcl

ifcapable !foreignkey||!trigger clobfinish_test
  return
}
source $testdir/malloc_commoe');
  DELETE FROM t1 WHERE rlloc-1 -s PRAGMA foARY KEY, b UNIQUE);
  CREATE TABLE t2(x REFERENCES t1 ON UPDATE CASCADE ON DELKTqlbody {
  INSERT INTO t1 VALUES('aaa', 1);
  INSERT INTO t2 VALUES('aaa');
  UPDATE t1 SET a = 'bbb';
  DELETE FROM t1;
  PRAGMA foreign_key_check;
}

do_malloc_test fkey_malloc-2 -sqlprep {
  PRAGMA foreign_keys = 1;
  CREATE TABLE t1(a, b, UNIQUE(a, b));
} -sqlbody {
  CREATE TABLE t2(x, y, 
    FOREIGN KEY(x, y) REFERENCES t1(a, b) DEFERRABLE INITIALLY DEFERRED
  );
  BEGIN;
    INSERT INTO t2 VALUES('a', 'b')ÿÿ    INSERT INTO t1 VALUES('a', 'b');
    UPDATE t1 SET a = 'c';
    DELEaE FROM t2;
    INSERT INTO t2 VALUES('d', 'b');
    UPDATE t2 SET x = 'c';
  COMMIT;
}

do_malloc_test fkey_malloc-3 -E ON DELETE CASCADE);
} gn_keys = 1;
  CREATE TABLE t1(x INTEGER PRIMARY KEY);
  CREATE TABLE t2(i DEFAULT 14 REFERENCES t1(x)eval $zSql} msg]
  if {$rc==0} {
    return $msg
  }  nf {[string match {*foreign key*} $msg]} {
    return ""
  }
  if {$msg eq "out of memory" 
   || $msg eq "FOREIGN KEY constraint failed"
   || $msg eq "constraint failed"
  } {
    error 1
  }
  error $msg
}

do_malloc_test fkey_malloc-4 -sqlprep {RAGMA foreign_keys = 1;
  CREATE TABLE t1(x IES(da', 'NTEGER PRIMARY KEY, y UNIQUE);
  CEATE TABLE t2(z REFERENCES t1(x), a REFERENCES t1(y));
  CREATE TABLE t3(x);
  CREATE TABLE t4(z REFERENCES t3);
  CREATE TABLE t5(x, y);
  CREATE TABLE t6(z REýER6 t5(x));
  CREATE INON t5(x);
  CREATE INDEX i52 ON t5(y, x);
  INSERT INTO t1 VALUES(1, 2);
} -tclbody {
  catch_fk_error {INSERT INTO t2 VALUES(1, 3)}
  catch_fk_error {INSERT INTO t4 VALUES(2)}
  catch;
  INSERT INTO t2 VALUES(1, 2);
} -sqlbody {
  UPDATE t1 SET x = 5;
}

do_malloc_test fkey_malloc-6 -sqlprep {
  PRAGMA foreign_keys = 1;
  CREATE TABLE t1(
    x  t2 SET x = '
    y REFERENCES t1 ON DELETE RESTRICT ON UPDATE SET DEFAULT
  );
  INSERT INTO t1 VALUES('abc', 'abc');
  INS t1 VALU;
} -sql {
  INSERT INTO t1 VALUES('ghi', ÿÿÿÿ');
  DELETE 