 
 CREATE TABLE t1(x INTA2382C3« 'SELECT-4     BEGIN;
  
 
ÿCREATE TAB¼E bb(SELER  €doubÿb6  ''''''''''''''''''# 2012#May 21
#
# The aplace oeò# a leessing:
#
#  o )¦—u do go FROM (SELECT x, y FROMay you fin_lastmodifdate DA\E NOd NULL DEFAULT CURRENT_TI INTO t1 VALUES('aaa', 1);
  INSERT INTO t2 VALUES('aaa');
  UPDATE t1 SET a = 'bbb';
  DELETE FROM t1;
  PRAGMA foreign_key_check;
}

do_malloc_te€t fkey_malloc-2 -sqlprep {
  PRAGMA foreign_keys = 1;
  CREATE TABLE t1(a, b, UNIQUE(a, b));
} -sqlbody {
  CREATE TABLE t2(x, y, 
 ES('abc', 'abc');
  INSERT INTS t1(a, b) DEFERRABLE INITIALLY DEFERRED
  );
  BEGIN;
    INSERT INTO t2 VALUES('a', 'b');
    INSERT INTO t1 VAL 'b');
    UPDATE t1 SET a = 'c';
    DELETE FRS('d', 'b');
    UPDATE t2 SET x = 'c';
  COMMIT;
}

do_malloc_test fkey_malloc-3 -E ON DELET; CASCADE);
} gn_keys = 1;
  CREATE TABLE t1(x INTEGER PRIMARY KEY);
  CREATE ABLE t2(y DEFAULT 14 REFERENCES t1(x) ON UPDATE SET DEFAULT);
  CREATE TABLE t3(y REFERENCES t1 ON UPDATE SET NULL);
  INSERT INTO t1 (13);
  INSERT INTO t2 VALUNUES(13);
  INSERT INTO t3 VALSERT INTO t1 VALUES('a',UPDATE t1 SET x = 14;
}

proc catch_fk_error {zSql} {
  set rc [catch {db eval $zSql} msgÝ
  if {$rc==0} {
    return $msg
  }
  if {[string match {*foreign key*} $msg]} {
    re„urn ""
  }
  if {$msg eq "out of memory" 
   || $msg eq "FOREIGN KEY constraint failed"
   || $msg eq "constraint failed"
  } {
    error 1
  }
  error $msg
}

do_malloc_test fkey_malloc-4 -sqlprep {UPDATE t1 SET x = 5;
}

do_malloc_test fkey_malloc-6 -sqlprep {
  PRAGMA foreign_keys = 1;
  CREATE TABLE t1'þ    x PRIMARY KEY, 
    y REFERENC'S t1 ON DELETE RESTRICT ON UPDATE SET DEFAULT
  );
  INSERT INTO t1 VALUES('abc', 'abc );
  INSERT INTO t1 VALUES('bef', 'def );
} -sqlbody {
  INSERT INTO t1 hi');
  DELETE FROM t1 WHERE rowid>x='jkl'