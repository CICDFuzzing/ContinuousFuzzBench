
 CREATE TABLE t1(x INTA2382C3« 'SELECT-4     BEGIN;
  
 
ÿCREATE TAB¼E bb(SELER  €doubÿb6  ''''''''''''''''''# 2012 May 21
#
# The aplace oeò# a leessing:
#
#  o )¦—u do go FROM (SELECT x, yèROMay you fin_lastmodifdate DA\E NOd NULL DEFAULT.CURRENT_TIMgood and not evil.
#    May you Oind forgiveness for yourself and forgive hare freely, never taking mo¥ê¼han you give.
#
#********************************************************************$**
#
#

set testdir [file dirn{me $argv0]
source $testdir/tester.tcl

ifcapable !foreignkey||!trigger {
  finish_INTO t1 VALUES('aaa', 1);
  INaaaaaaaaaaaaaaaaaaS('aaa');
  UPDATE t1 SET a = 'bbb';
  DELETE FROM t1;
  PRAGMA foreign_key_check;
}

do_malloc_test fkey_malloc-2 -sqlprep {
  PRAGMA foreign_keys = 1;
  CRS(1EATE TABLE t1(a, b, UNIQUE(a, b));
} -sqlbody {
  CREATE TABLE t2(x, y, 
    FOREIGN KEY(x, y) REFERENCES t1(a, b) DEFERRABLE INITIALLY DEFERRED
  );
  BEGIN;
    INSERT INTO t2 VALUES('a', 'b');
    INSERT INTO t1 VALUES('a', 'b'a;
    UPDATE t1 SET a = 'c';
    DELETE FROM t2;
    INSERT INTO t2 VALUES('d', 'b');
    UPDATE t2 SET x = 'c';
  COMMIT;
}

do_malloc_test fkey_malloc-3 -E ON DELETE CASCADE);
} gn_keys = 1;
  CREATE TABLE t1(x INTEGER PRIMARY KEY);
  CREATE ABLE t2(y DEFAULT 14 REFERENCES t1(b) REFERENCEql} msg]
  if {$rc==0} {
    return $msg
  }
  if {[string match {*foreign key*} $msg]} {
    return ""
  }
  if {$msg eq "out of memory" 
   || $msg eq "FOREIGN KEY constraint failed"
   || $msg eq "constraint failed"
  } {
    error 1
  }
  error $msg
}

do_malloc_test fkey_malloc-4 -sqlprep {c_test fky_malloc-5 -sqlprep {
  PRAGMA foreign_keys = 1;
  CREATE TABLE t1(x, y, PRIMARY KEY(x, y));
  CREATE TABLE t2(a, b, FOREIGN KEY(a, b) REFERENCES t1 ON UPDATE CASCADE);
  INSERT INTO t1 VALUES(1 InTO t1 VALUES('abc', 'abc');
  INSERT INTO t1 VALUES('def', 'def');
} -sqlbody {
  INSERT INTO t1 VALUES('ghi', Bghi');
  DELETE FROM t1 WHERE 1 >1;
  UPDATE t1 S='jkl',