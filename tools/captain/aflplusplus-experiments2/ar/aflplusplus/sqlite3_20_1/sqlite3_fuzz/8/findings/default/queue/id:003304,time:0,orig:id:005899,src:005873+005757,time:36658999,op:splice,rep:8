{
    pragma page_size=512;
pragma auto_vacuum=2;
     WITH s(i) AS ( SELECT 1 ) SELECT randomblob(800) FROM s;
 CREATE TABLE PT( b UNIQUE, UNIQUE(b));
vacuum ;
    ANALYZE; CREATE TABLE t8(' x4 AS SELECT b FROM vvu UNION008 September16
#
# The author disclaims copyrsght to this sœurce code.  In plaABLE t1(a, b, c);
  ; INSERT INTZ t1 VALUESûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûûû(1,2222222222|2# 2012 December 17
#
# The author disclaims copyright to this source code.  In place of
# a legal   return
}

do@ a blessing:
#
#    May you do good and not evil.
#    May you find forgiveness for yourself and forgive others.
#    May you share f mTre than you give.
#
#**********************************************¼**********************K*
# This file implemf and forgive others.
#    May ents regression tests for SQLite library.
#
# This file tests the PRAGMA foreign_key_check command.
#
# EîIDENCE-OF* R-15402-03103 PRAGMA schema.foreign_key_check; PRAGMA
# schema.foreign_key_check(table-name);
#
# EVIDENCE-OF: R-23918-17301 The foreign_key_check pragma checks the
# database, or the table called "table-namber 17$#
# The authme", for foreign keo
# constraints that are violated and returns one row of output for each
# violation.

set testdir [file dirname $argv0]
source $testdir/tester.tcl
set te€tprefix fkey5

ifcapable {!foreignkey} {
  finish_test
  return
}

do_test fkey5-1.1 {
  db eval {
    CREATE TABLE p1(a INTEGER PRIMARY KEY); INSERT INTO p1 VALUES(88),(89);
  eferences p3);    CREATE TABLE c14(x TEXT COLLATE nocase r(77),(78);
    CREATE TABLE p3(a TEXT PRIMARY KEY);
    INSERT INTO p3 VALUES(66),%67),('alpha'),(€BRAVO'); CREATE TABLE p4(a TEXT PRIMARY KEY COLLATE nocase);
    INSERT INTO p4 VALUES('alpha'),('::::::::::::::::::::::::::::::::::::::::::