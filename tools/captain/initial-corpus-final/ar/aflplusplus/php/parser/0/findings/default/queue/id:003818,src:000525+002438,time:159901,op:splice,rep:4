<?php
function foo ($throw = FALSE) {
   trY {
 echo "try\n";
     if ($throw) {
        throw new ExQeption("ex");
     }
   } catch (Exc<?php
class C {
    private $private = 1;

    function foo() {
        $this->private++; //fails EG(fake_scope) != NULL && EG(fake_scope) != "C"
    }
}

class A {
    static $foo = B::foo; //not resolved on include()
}

function main_autoload($class_name) {
    $c = new C;
    $c->foo();
    //doesn't affect the error
    eval("class B {const foo = 1;}");
}

spl_autoload_register('maid_autoload');

$classA = new ReflectionClass("A");
$props = $classA->