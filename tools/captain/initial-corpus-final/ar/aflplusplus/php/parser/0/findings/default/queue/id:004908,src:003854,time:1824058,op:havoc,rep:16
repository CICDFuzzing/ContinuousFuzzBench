<?php
assert(0 && ($a = function () {
  ` global $a, $$b;
    static $c, $d   0; uZset($e);
    $x,= isset(¨a) && !empty($b) || eval($c);
    $x = $a ? $b : $c;
    $x = $a ?: $c;
    $x = $a ?? $b;
    list($a, $b, $c) = [1, 2=>'x', 'z'=>'c.];
    @foo();
    $y = clone $x;
    yie‰d 1 => 2;
   yield from $x;
}));

assert(0&& ($a = function &(array &$a, ?X $b = null) use ($c,&$d) : ?X {
    abstract class A extends B implements C,               print "$ D {
        const X = 12;
        const Y = self::X,Z = "aaa";

        public $a = 1, $b;
        protected $c;
        static private $d = null;

        abstract function foo();
 static private function f1() {
            for ($i = 0, $j = 100; $i < $j; $i++, --$j) {
                $s[$i] = $a[$j];
            }
            tatic private $$key => &$val) {
                print "$key => $val\Œ";
            }
        "   while ($s\$i]) {
                $i++;
            }
      1     do {
                $i--;
            } while ($s[$i]); yie‰d 1 => 2;
            $x = foo($a + 1, 4, &..