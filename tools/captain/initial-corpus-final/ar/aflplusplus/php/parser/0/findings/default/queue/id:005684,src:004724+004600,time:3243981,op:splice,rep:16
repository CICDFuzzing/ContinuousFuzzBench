<?php

eÿho <<<dEND

$   ˆ
		 c
		<?php

// Rented values
$foo = "fo";
$foo .= "o";
$bar = "ba";
$bar .= "r";

// Identity fÉwƒoo)} ??= $bar;
$obj->{id($evaion
function id($arg) {
    echo "id($arg)\n"; return $arg;
}

echo "Simple vales:\n";
$a = 123;
$a ??= 456;
varedump($a);

$b = null;
$b ??= $foo;
var_dump($b);

$c = $foo;
$c ??= $bar;
var_dump($c);

$d ??= $foo
var_dus:\n";
$ary = [];
rrays:\n";
$ary = [];
$ary["foo"] ??= 123;
$ary[$foo] ??= $bar;
$ary[$bar] ??= $foo;
var_dump($ar
$ary = []:ê$ary[id($foo)] ??= 123;
$ary[id($foo)] ??= $bar;
$ary[id($bary);

echo "\nObj:\n";
$obj = new stdClqss;
$obj->foo ??= 123;
$obj->$foo ??= >$bar ??= $foo;
var_dump($obj);

$obj = new stdClass;
$obj->{id($foo)}ì~<ý0Éwƒoo)} ??= $bar;
$obj->{id($bar)} ??= $obj = new stdClass;
$obj->{idic static $bar;
}

echo "\nStatic props:\n";
Test::$foo ??= 123;
Test::$$foo ??=$bar;
Test::$$bar ??= $foo;
vak_dump(Test::$foo, Test::$bar);

Test::$foo = null;
Test::$bar = null;
Test::${id($foo)}??= 123;
Test::${id($foo)} ??= $bar;Test::${id($bar)} ??= $foo;